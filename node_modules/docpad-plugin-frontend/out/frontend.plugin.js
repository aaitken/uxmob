// Generated by CoffeeScript 1.10.0
(function() {
  var _, catalog, catalogFile, collectMeta, collectResources, fs, getCatalog, grabResources, makeList,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  fs = require('fs');

  catalogFile = '.build-catalog.json';

  catalog = null;

  getCatalog = function() {
    var e, error;
    if (catalog) {
      return catalog;
    }
    if (fs.existsSync(catalogFile)) {
      try {
        catalog = JSON.parse(fs.readFileSync(catalogFile, 'utf8'));
      } catch (error) {
        e = error;
      }
    }
    if (!catalog) {
      catalog = {};
    }
    return catalog;
  };

  makeList = function(str) {
    if (_.isString(str)) {
      return _.compact(str.split(/\s*,\s*/));
    }
    return str;
  };

  collectMeta = function(model, callback) {
    var data, next;
    data = [];
    next = function(err, ctx) {
      if (err) {
        return callback(err, null);
      }
      if (ctx) {
        data.push(ctx.getMeta().toJSON());
        if (ctx.hasLayout()) {
          return ctx.getLayout(next);
        }
      }
      return callback(null, data);
    };
    return next(null, model);
  };

  grabResources = function(collection, prefix) {
    var k, re, res, v;
    res = {};
    re = new RegExp('^' + prefix + '(\\d+)?$');
    for (k in collection) {
      v = collection[k];
      if (re.test(k)) {
        res[k] = v;
      }
    }
    return res;
  };

  collectResources = function(documentModel, prefix) {
    var allMeta, assets, files, k, m, order, r, res, v;
    allMeta = documentModel.get('__allMeta');
    files = [];
    if (allMeta != null) {
      files = allMeta.map(function(meta) {
        return grabResources(meta, prefix);
      });
    }
    res = {};
    while (r = files.pop()) {
      _.extend(res, r);
    }
    assets = (function() {
      var results;
      results = [];
      for (k in res) {
        v = res[k];
        order = -1;
        if (m = k.match(/(\d+)$/)) {
          order = parseInt(m[1]);
        }
        results.push({
          order: order,
          files: makeList(v)
        });
      }
      return results;
    })();
    assets.sort(function(a, b) {
      return a.order - b.order;
    });
    assets = _.flatten(assets.map(function(item) {
      return item.files;
    }));
    return _.uniq(_.compact(assets));
  };

  module.exports = function(BasePlugin) {
    var FrontendAssetsPlugin;
    return FrontendAssetsPlugin = (function(superClass) {
      extend(FrontendAssetsPlugin, superClass);

      function FrontendAssetsPlugin() {
        return FrontendAssetsPlugin.__super__.constructor.apply(this, arguments);
      }

      FrontendAssetsPlugin.prototype.name = 'frontend';

      FrontendAssetsPlugin.prototype.config = {
        frontendAssetsOptions: {
          cacheReset: 'date',
          urlTransformer: function(url, cacheToken) {
            if ((cacheToken != null) && url.charAt(0) === '/') {
              return "/" + cacheToken + url;
            }
            return url;
          }
        }
      };

      FrontendAssetsPlugin.prototype.generateBefore = function(opts, next) {
        catalog = null;
        return next();
      };

      FrontendAssetsPlugin.prototype.renderBefore = function(opts, next) {
        var collection, docs, errors, processedDocs, templateData;
        collection = opts.collection, templateData = opts.templateData;
        docs = collection.filter(function(file) {
          return file.type === 'document';
        });
        if (!docs.length) {
          return next();
        }
        processedDocs = 0;
        errors = 0;
        return docs.forEach(function(model) {
          return collectMeta(model, function(err, meta) {
            processedDocs++;
            if (err) {
              errors++;
              return next(err);
            }
            model.set('__allMeta', meta);
            if (processedDocs >= docs.length) {
              return next();
            }
          });
        });
      };

      FrontendAssetsPlugin.prototype.extendTemplateData = function(arg) {
        var config, docpad, getAssets, templateData;
        templateData = arg.templateData;
        docpad = this.docpad;
        config = this.config.frontendAssetsOptions;
        getAssets = function(model, prefix) {
          var _catalog, cacheToken, isDebug, res;
          res = collectResources(model, prefix);
          if (docpad.getConfig().frontendCacheReset != null) {
            cacheToken = docpad.getConfig().frontendCacheReset;
          } else {
            cacheToken = config.cacheReset || '';
          }
          isDebug = docpad.getConfig().frontendDebug;
          _catalog = getCatalog();
          return _.flatten(res.map(function(item) {
            var r;
            if (item in _catalog) {
              r = _catalog[item];
              if (isDebug) {
                if (r.files.length && _.isString(r.files[0])) {
                  return r.files[0];
                }
                return _.pluck(r.files, 'file');
              }
              return config.urlTransformer(item, r[cacheToken]);
            }
            return item;
          }));
        };
        return templateData.assets = function(type) {
          return getAssets(this.documentModel, type);
        };
      };

      return FrontendAssetsPlugin;

    })(BasePlugin);
  };

}).call(this);
